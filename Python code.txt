import pandas as pd
housing=pd.read_csv("/content/data.csv")
housing
housing.info()
housing["TAX"].value_counts()
housing.describe()
import matplotlib.pyplot as plt
housing.hist(bins=50,figsize=(20,15))
plt.show
#train ans test data splitting
#import numpy as np
#def split_train_test(data,test_ratio):
  #np.random.seed(42)
  #shuffled=np.random.permutation(len(data))
  #test_set_size=int(len(data)*test_ratio)
  #est_indices=shuffled[:test_set_size]
  #train_indices=shuffled[test_set_size:]
  #return data.iloc[train_indices],data.iloc[test_indices]
# train_set, test_set = split_train_test(housing,0.2)
# print(f"rows in train set:{len(train_set)}\n rows in test set;{len(test_set)}")
from sklearn .model_selection import train_test_split
train_set,test_set= train_test_split(housing,test_size=0.2,random_state=42)
print(f"rows in train set:{len(train_set)}\n rows in test set:{len(test_set)}")
from sklearn .model_selection import train_test_split
train_set,test_set= train_test_split(housing,test_size=0.2,random_state=42)
print(f"rows in train set:{len(train_set)}\n rows in test set:{len(test_set)}")
from sklearn.model_selection import StratifiedShuffleSplit
split=StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)
for train_index,test_index in split.split(housing,housing["CHAS"]):
  strat_train_set=housing.loc[train_index]
  strat_test_set=housing.loc[test_index]

# attribute combination
strat_test_set["CHAS"].value_counts()

housing=strat_train_set.copy()

# adding new column attribute TAXRM
#housing["TAXRM"]=housing["TAX"]/housing["RM"]
housing.plot(kind="scatter",y="MEDV", x="RM",alpha=1)

corr_matrix=housing.corr()
corr_matrix["MEDV"].sort_values(ascending=False)
from pandas.plotting import scatter_matrix
features = ['MEDV','RM','DIS','LSTAT','PTRATIO']

# plotting the scatter matrix
# with the features
scatter_matrix(housing[features])
plt.show()

housing.plot(kind="scatter",y="MEDV", x="RM",alpha=1)

housing = strat_train_set.drop("MEDV",axis=1)
housing_labels = strat_train_set["MEDV"].copy()

housing

housing_labels

import numpy as np
from sklearn.impute import SimpleImputer
imp = SimpleImputer(strategy='median')
imp.fit(housing)


#before imputer
housing.describe()

imp.statistics_

# any missing data of the attribute will be replaced automatically
X=imp.transform(housing)
housing_tr =pd.DataFrame(X, columns=housing.columns)

housing_tr.describe()

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer

# Define the pipeline steps
steps = [
    ('imp', SimpleImputer(strategy='median')),
    ('std_scaler', StandardScaler())
]

# Create the pipeline
my_pipeline = Pipeline(steps)

# Fit the pipeline to the training data
housing_num_tr = my_pipeline.fit_transform(housing)

housing_num_tr

from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
#model = LinearRegression()
#model=DecisionTreeRegressor()
model=RandomForestRegressor()
model.fit(housing_num_tr,housing_labels)

some_data=housing.iloc[:5]
some_labels=housing_labels.iloc[:5]

prepared_data= my_pipeline.transform(some_data)

model.predict(prepared_data)

list(some_labels)


from sklearn.metrics import mean_squared_error
housing_predictions=model.predict(housing_num_tr)
mse=mean_squared_error(housing_labels,housing_predictions)
rmse=np.sqrt(mse)

from sklearn.model_selection import cross_val_score
scores=cross_val_score(model,housing_num_tr,housing_labels,scoring="neg_mean_squared_error", cv=10)
rmse_scores=np.sqrt(-scores)


def print_scores(scores):
  print("Scores:",scores)
  print("mean",scores.mean())
  print("Standard deviation",scores.std())

#to save the model
from joblib import dump,load
dump(model,"dragon.joblib")


x_test=strat_test_set.drop("MEDV",axis=1)
y_test=strat_test_set["MEDV"].copy()
x_test_prepared=my_pipeline.transform(x_test)
final_predictions=model.predict(x_test_prepared)
final_mse=mean_squared_error(y_test,final_predictions)
final_rmse=np.sqrt(final_mse)
print(final_predictions,list(y_test))

final_rmse
prepared_data[1]


import numpy as np
model.load("/content/dragon.joblib")



features=np.array([[0.02729	,0.0,	7.07,	0	,0.469	,7.185	,61.1,	4.9671,	2,	242,	17.8,	392.83,	4.0]])
model.predict(features)
